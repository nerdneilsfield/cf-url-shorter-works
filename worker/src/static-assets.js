/**
 * Static assets - Admin UI files
 * Auto-generated by scripts/build-static.js - DO NOT EDIT MANUALLY
 */

export const STATIC_ASSETS = {
  'index.html': "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>URL Shortener - Admin Dashboard</title>\n  <!-- Tailwind CSS CDN -->\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <!-- Font Awesome for icons -->\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n  <!-- Custom styles -->\n  <link rel=\"stylesheet\" href=\"/admin/styles.css\">\n</head>\n<body class=\"bg-gray-50 min-h-screen\">\n  <!-- Toast Notification Container -->\n  <div id=\"toast-container\" class=\"fixed top-4 right-4 z-50 space-y-2\"></div>\n\n  <div class=\"container mx-auto px-4 py-8 max-w-7xl\">\n    <!-- Header -->\n    <div class=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <div class=\"flex items-center space-x-3\">\n          <i class=\"fas fa-link text-3xl text-blue-600\"></i>\n          <h1 class=\"text-3xl font-bold text-gray-800\">URL Shortener</h1>\n        </div>\n        <div class=\"text-sm text-gray-500\">\n          <i class=\"fas fa-shield-alt\"></i> Admin Dashboard\n        </div>\n      </div>\n\n      <!-- Token Input -->\n      <div class=\"border-t pt-4\">\n        <label for=\"api-token\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n          <i class=\"fas fa-key mr-2\"></i>API Token\n        </label>\n        <div class=\"flex space-x-2\">\n          <input\n            type=\"password\"\n            id=\"api-token\"\n            placeholder=\"Enter your API token\"\n            autocomplete=\"off\"\n            class=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n          >\n          <button\n            type=\"button\"\n            id=\"toggle-token-visibility\"\n            class=\"px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition\"\n            title=\"Show/Hide Token\"\n          >\n            <i id=\"visibility-icon\" class=\"fas fa-eye\"></i>\n          </button>\n          <button\n            type=\"button\"\n            id=\"validate-token-btn\"\n            class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition\"\n            title=\"Validate Token\"\n          >\n            <i class=\"fas fa-check-circle mr-1\"></i> Validate\n          </button>\n        </div>\n        <p class=\"text-xs text-gray-500 mt-1\">\n          <i class=\"fas fa-info-circle\"></i> Token will be saved in browser\n        </p>\n      </div>\n    </div>\n\n    <!-- Create Link Form -->\n    <div class=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n      <h2 class=\"text-2xl font-bold text-gray-800 mb-4 flex items-center\">\n        <i class=\"fas fa-plus-circle text-blue-600 mr-2\"></i> Create Short Link\n      </h2>\n      <form id=\"create-form\" class=\"space-y-4\">\n        <div>\n          <label for=\"target-url\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n            Target URL <span class=\"text-red-500\">*</span>\n          </label>\n          <input\n            type=\"url\"\n            id=\"target-url\"\n            name=\"target\"\n            placeholder=\"https://example.com/long/url\"\n            required\n            class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n          >\n        </div>\n\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label for=\"custom-slug\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n              Custom Slug (optional)\n            </label>\n            <div class=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                id=\"custom-slug\"\n                name=\"slug\"\n                placeholder=\"my-link\"\n                pattern=\"[a-zA-Z0-9_-]+\"\n                maxlength=\"32\"\n                class=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n              >\n              <button\n                type=\"button\"\n                id=\"check-slug-btn\"\n                class=\"px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition\"\n              >\n                <i class=\"fas fa-search\"></i> Check\n              </button>\n            </div>\n            <p class=\"text-xs text-gray-500 mt-1\">Letters, numbers, hyphens, underscores only (max 32)</p>\n            <div id=\"slug-check-result\" class=\"mt-1 text-sm font-semibold\"></div>\n          </div>\n\n          <div>\n            <label for=\"status-code\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n              Redirect Type\n            </label>\n            <select\n              id=\"status-code\"\n              name=\"status\"\n              class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n            >\n              <option value=\"302\" selected>302 Temporary</option>\n              <option value=\"301\">301 Permanent</option>\n              <option value=\"307\">307 Temporary (Preserve Method)</option>\n              <option value=\"308\">308 Permanent (Preserve Method)</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label for=\"expires-at\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n            Expiration (optional)\n          </label>\n          <input\n            type=\"datetime-local\"\n            id=\"expires-at\"\n            name=\"expiresAt\"\n            class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n          >\n        </div>\n\n        <button\n          type=\"submit\"\n          class=\"w-full md:w-auto px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition shadow-md hover:shadow-lg\"\n        >\n          <i class=\"fas fa-plus mr-2\"></i> Create Link\n        </button>\n      </form>\n    </div>\n\n    <!-- Links List -->\n    <div class=\"bg-white rounded-lg shadow-md p-6\">\n      <h2 class=\"text-2xl font-bold text-gray-800 mb-4 flex items-center\">\n        <i class=\"fas fa-list text-blue-600 mr-2\"></i> Short Links\n      </h2>\n\n      <!-- Search and Refresh Controls -->\n      <div class=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-4\">\n        <div class=\"flex-1 flex space-x-2\">\n          <input\n            type=\"text\"\n            id=\"search-input\"\n            placeholder=\"Search by slug or URL...\"\n            class=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n          >\n          <button\n            id=\"search-btn\"\n            class=\"px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition\"\n          >\n            <i class=\"fas fa-search mr-1\"></i> Search\n          </button>\n        </div>\n        <button\n          id=\"refresh-btn\"\n          class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition\"\n        >\n          <i class=\"fas fa-sync-alt mr-1\"></i> Refresh\n        </button>\n      </div>\n\n      <!-- Loading State -->\n      <div id=\"links-loading\" class=\"hidden text-center py-8 text-gray-500\">\n        <i class=\"fas fa-spinner fa-spin text-3xl mb-2\"></i>\n        <p>Loading links...</p>\n      </div>\n\n      <!-- Links Table -->\n      <div id=\"links-table\" class=\"hidden overflow-x-auto\">\n        <table class=\"w-full\">\n          <thead class=\"bg-gray-50 border-b-2 border-gray-200\">\n            <tr>\n              <th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Slug</th>\n              <th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Target URL</th>\n              <th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Visits</th>\n              <th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Created</th>\n              <th class=\"px-4 py-3 text-left text-sm font-semibold text-gray-700\">Actions</th>\n            </tr>\n          </thead>\n          <tbody id=\"links-tbody\" class=\"divide-y divide-gray-200\">\n            <!-- Links will be inserted here -->\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Stats and Pagination -->\n      <div id=\"stats-pagination\" class=\"hidden mt-6 p-4 bg-gray-50 rounded-lg\">\n        <div class=\"flex flex-col md:flex-row items-center justify-between gap-4\">\n          <!-- Results Info (Always visible) -->\n          <div class=\"text-sm text-gray-600\">\n            Showing <span id=\"range-start\" class=\"font-semibold\">1</span> - <span id=\"range-end\" class=\"font-semibold\">10</span> of <span id=\"total-count\" class=\"font-semibold\">0</span> links\n          </div>\n\n          <!-- Pagination Controls (Only when multiple pages) -->\n          <div id=\"pagination-controls\" class=\"hidden flex items-center gap-4\">\n            <button id=\"prev-page\" class=\"px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition disabled:opacity-50 disabled:cursor-not-allowed\">\n              <i class=\"fas fa-chevron-left mr-1\"></i> Previous\n            </button>\n            <span id=\"page-info\" class=\"text-gray-700 font-semibold\">Page 1 of 1</span>\n            <button id=\"next-page\" class=\"px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition disabled:opacity-50 disabled:cursor-not-allowed\">\n              Next <i class=\"fas fa-chevron-right ml-1\"></i>\n            </button>\n            <div class=\"flex items-center space-x-2\">\n              <label for=\"jump-to-page\" class=\"text-sm text-gray-700\">Jump:</label>\n              <input\n                type=\"number\"\n                id=\"jump-to-page\"\n                min=\"1\"\n                placeholder=\"1\"\n                class=\"w-16 px-2 py-1 border border-gray-300 rounded text-center focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n              <button id=\"jump-btn\" class=\"px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded transition\">\n                Go\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- No Links Message -->\n      <div id=\"no-links\" class=\"hidden text-center py-12 text-gray-500\">\n        <i class=\"fas fa-inbox text-5xl mb-4\"></i>\n        <p class=\"text-lg\">No links found</p>\n      </div>\n    </div>\n  </div>\n\n  <!-- Edit Modal -->\n  <div id=\"edit-modal\" class=\"hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-40 p-4\">\n    <div class=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h2 class=\"text-2xl font-bold text-gray-800\">\n            <i class=\"fas fa-edit text-blue-600 mr-2\"></i> Edit Link\n          </h2>\n          <button id=\"close-modal\" class=\"text-gray-400 hover:text-gray-600 text-2xl\">\n            <i class=\"fas fa-times\"></i>\n          </button>\n        </div>\n\n        <form id=\"edit-form\" class=\"space-y-4\">\n          <input type=\"hidden\" id=\"edit-slug\" name=\"slug\">\n\n          <div>\n            <label for=\"edit-target\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n              Target URL <span class=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"url\"\n              id=\"edit-target\"\n              name=\"target\"\n              required\n              class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n            >\n          </div>\n\n          <div>\n            <label for=\"edit-status\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n              Redirect Type\n            </label>\n            <select\n              id=\"edit-status\"\n              name=\"status\"\n              class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n            >\n              <option value=\"302\">302 Temporary</option>\n              <option value=\"301\">301 Permanent</option>\n              <option value=\"307\">307 Temporary (Preserve Method)</option>\n              <option value=\"308\">308 Permanent (Preserve Method)</option>\n            </select>\n          </div>\n\n          <div>\n            <label for=\"edit-expires\" class=\"block text-sm font-semibold text-gray-700 mb-2\">\n              Expiration\n            </label>\n            <input\n              type=\"datetime-local\"\n              id=\"edit-expires\"\n              name=\"expiresAt\"\n              class=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition\"\n            >\n          </div>\n\n          <div class=\"flex space-x-3 pt-4\">\n            <button\n              type=\"submit\"\n              class=\"flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition\"\n            >\n              <i class=\"fas fa-save mr-2\"></i> Save Changes\n            </button>\n            <button\n              type=\"button\"\n              id=\"cancel-edit\"\n              class=\"flex-1 px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-lg transition\"\n            >\n              <i class=\"fas fa-times mr-2\"></i> Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <script src=\"/admin/app.js\"></script>\n</body>\n</html>\n",
  'styles.css': "/**\n * Admin UI Custom Styles (Complement to Tailwind CSS)\n */\n\n/* Custom utilities that Tailwind doesn't cover */\n.hidden {\n  display: none !important;\n}\n\n/* Smooth transitions for toast notifications */\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slideOutRight {\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n}\n\n/* Loading spinner animation */\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.fa-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Custom scrollbar for modal */\n.modal-content::-webkit-scrollbar {\n  width: 8px;\n}\n\n.modal-content::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.modal-content::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 4px;\n}\n\n.modal-content::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n\n/* Table responsive improvements */\n@media (max-width: 768px) {\n  table {\n    font-size: 0.875rem;\n  }\n\n  .max-w-xs {\n    max-width: 120px;\n  }\n}\n",
  'app.js': "/**\n * Admin UI JavaScript - Simplified token-based auth\n */\n\n// State\nlet apiToken = '';\nlet currentLinks = [];\nlet filteredLinks = [];\nlet currentPage = 1;\nlet pageSize = 10;\nlet searchQuery = '';\nlet tokenVisible = false;\n\n// API Base URL\nconst API_BASE = '/api/admin';\n\n// Initialize app\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Load token from storage\n  const stored = localStorage.getItem('api_token');\n  if (stored) {\n    apiToken = stored;\n    updateTokenDisplay();\n  }\n\n  // Event listeners\n  document.getElementById('api-token').addEventListener('input', handleTokenChange);\n  document.getElementById('toggle-token-visibility').addEventListener('click', toggleTokenVisibility);\n  document.getElementById('validate-token-btn').addEventListener('click', validateToken);\n  document.getElementById('refresh-btn').addEventListener('click', loadLinks);\n  document.getElementById('create-form').addEventListener('submit', handleCreateLink);\n  document.getElementById('edit-form').addEventListener('submit', handleEditLink);\n  document.getElementById('close-modal').addEventListener('click', closeEditModal);\n  document.getElementById('cancel-edit').addEventListener('click', closeEditModal);\n  document.getElementById('check-slug-btn').addEventListener('click', checkSlugAvailability);\n  document.getElementById('search-btn').addEventListener('click', handleSearch);\n  document.getElementById('search-input').addEventListener('keypress', (e) => {\n    if (e.key === 'Enter') handleSearch();\n  });\n  document.getElementById('prev-page').addEventListener('click', () => changePage(-1));\n  document.getElementById('next-page').addEventListener('click', () => changePage(1));\n  document.getElementById('jump-btn').addEventListener('click', jumpToPage);\n\n  // Show \"no links\" initially\n  document.getElementById('no-links').classList.remove('hidden');\n});\n\n// Token handling\nfunction handleTokenChange(e) {\n  const input = e.target;\n  // If user is typing, always show as password\n  if (input.type === 'text') {\n    input.type = 'password';\n    tokenVisible = false;\n    document.getElementById('visibility-icon').className = 'fas fa-eye';\n  }\n  apiToken = input.value.trim();\n  localStorage.setItem('api_token', apiToken);\n}\n\nfunction maskToken(token) {\n  if (!token || token.length <= 6) {\n    return token;\n  }\n  const first3 = token.substring(0, 3);\n  const last3 = token.substring(token.length - 3);\n  const maskLength = token.length - 6;\n  return first3 + '*'.repeat(maskLength) + last3;\n}\n\nfunction updateTokenDisplay() {\n  const input = document.getElementById('api-token');\n  if (tokenVisible) {\n    input.type = 'text';\n    input.value = apiToken;\n    document.getElementById('visibility-icon').className = 'fas fa-eye-slash';\n  } else {\n    input.type = 'password';\n    input.value = apiToken;\n    document.getElementById('visibility-icon').className = 'fas fa-eye';\n  }\n}\n\nfunction toggleTokenVisibility() {\n  tokenVisible = !tokenVisible;\n  updateTokenDisplay();\n}\n\nasync function validateToken() {\n  if (!apiToken) {\n    showToast('Please enter a token first', 'warning');\n    return;\n  }\n\n  showToast('Validating token...', 'info');\n\n  try {\n    // Test token by making a simple API request\n    const response = await apiRequest(`${API_BASE}/links?limit=1`);\n\n    if (response.ok) {\n      showToast('Token is valid! ✓', 'success');\n    } else if (response.status === 401 || response.status === 403) {\n      showToast('Invalid token', 'error');\n    } else {\n      showToast('Unable to validate token (server error)', 'error');\n    }\n  } catch (err) {\n    showToast(err.message, 'error');\n  }\n}\n\n// Toast Notification System\nfunction showToast(message, type = 'info') {\n  const container = document.getElementById('toast-container');\n  const toast = document.createElement('div');\n\n  const icons = {\n    success: 'fa-check-circle',\n    error: 'fa-exclamation-circle',\n    warning: 'fa-exclamation-triangle',\n    info: 'fa-info-circle'\n  };\n\n  const colors = {\n    success: 'bg-green-500',\n    error: 'bg-red-500',\n    warning: 'bg-yellow-500',\n    info: 'bg-blue-500'\n  };\n\n  toast.className = `${colors[type]} text-white px-6 py-4 rounded-lg shadow-lg flex items-center space-x-3 min-w-[300px] max-w-md transform transition-all duration-300 ease-in-out translate-x-full`;\n  toast.innerHTML = `\n    <i class=\"fas ${icons[type]} text-xl\"></i>\n    <span class=\"flex-1\">${escapeHtml(message)}</span>\n    <button class=\"text-white hover:text-gray-200 transition\" onclick=\"this.parentElement.remove()\">\n      <i class=\"fas fa-times\"></i>\n    </button>\n  `;\n\n  container.appendChild(toast);\n\n  // Animate in\n  setTimeout(() => {\n    toast.classList.remove('translate-x-full');\n    toast.classList.add('translate-x-0');\n  }, 10);\n\n  // Auto remove after 5 seconds\n  setTimeout(() => {\n    toast.classList.add('translate-x-full');\n    setTimeout(() => toast.remove(), 300);\n  }, 5000);\n}\n\n// API Helpers\nfunction getAuthHeaders() {\n  return {\n    'Authorization': `Bearer ${apiToken}`,\n    'Content-Type': 'application/json',\n  };\n}\n\nasync function apiRequest(url, options = {}) {\n  if (!apiToken) {\n    throw new Error('Please enter API token first');\n  }\n\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...getAuthHeaders(),\n      ...options.headers,\n    },\n  });\n\n  if (response.status === 401 || response.status === 403) {\n    throw new Error('Invalid token or unauthorized');\n  }\n\n  return response;\n}\n\n// Load links\nasync function loadLinks() {\n  const loading = document.getElementById('links-loading');\n  const table = document.getElementById('links-table');\n  const noLinks = document.getElementById('no-links');\n\n  loading.classList.remove('hidden');\n  table.classList.add('hidden');\n  noLinks.classList.add('hidden');\n\n  try {\n    const response = await apiRequest(`${API_BASE}/links?limit=100`);\n\n    if (!response.ok) {\n      throw new Error('Failed to load links');\n    }\n\n    const data = await response.json();\n    currentLinks = data.links || [];\n    filteredLinks = currentLinks;\n    currentPage = 1;\n    searchQuery = '';\n    document.getElementById('search-input').value = '';\n\n    loading.classList.add('hidden');\n\n    if (currentLinks.length === 0) {\n      noLinks.classList.remove('hidden');\n    } else {\n      renderLinksWithPagination();\n      table.classList.remove('hidden');\n    }\n  } catch (err) {\n    loading.classList.add('hidden');\n    showToast(err.message, 'error');\n  }\n}\n\n// Render links table with pagination\nfunction renderLinksWithPagination() {\n  const tbody = document.getElementById('links-tbody');\n  const statsPagination = document.getElementById('stats-pagination');\n  const paginationControls = document.getElementById('pagination-controls');\n  tbody.innerHTML = '';\n\n  const totalPages = Math.ceil(filteredLinks.length / pageSize);\n  const startIdx = (currentPage - 1) * pageSize;\n  const endIdx = startIdx + pageSize;\n  const linksToShow = filteredLinks.slice(startIdx, endIdx);\n\n  linksToShow.forEach(link => {\n    const row = document.createElement('tr');\n    row.className = 'hover:bg-gray-50 transition';\n\n    const createdDate = new Date(link.createdAt * 1000).toLocaleString();\n    const shortUrl = `${window.location.origin}/${link.slug}`;\n\n    row.innerHTML = `\n      <td class=\"px-4 py-3\">\n        <div class=\"flex items-center space-x-2\">\n          <span class=\"font-mono font-semibold text-blue-600\">${escapeHtml(link.slug)}</span>\n          <button\n            class=\"px-2 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 text-xs rounded transition\"\n            onclick=\"copyToClipboard('${shortUrl}')\"\n            title=\"Copy short URL\"\n          >\n            <i class=\"fas fa-copy\"></i>\n          </button>\n        </div>\n      </td>\n      <td class=\"px-4 py-3 max-w-xs\">\n        <div class=\"flex items-center space-x-2\">\n          <a href=\"${escapeHtml(link.target)}\" target=\"_blank\" class=\"text-blue-600 hover:underline truncate flex-1\" title=\"${escapeHtml(link.target)}\">\n            ${escapeHtml(link.target)}\n          </a>\n          <button\n            class=\"px-2 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 text-xs rounded transition flex-shrink-0\"\n            onclick=\"copyToClipboard('${escapeHtml(link.target).replace(/'/g, \"\\\\'\")}')\"\n            title=\"Copy target URL\"\n          >\n            <i class=\"fas fa-copy\"></i>\n          </button>\n        </div>\n      </td>\n      <td class=\"px-4 py-3\">\n        <span class=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded\">\n          ${link.visitCount}\n        </span>\n      </td>\n      <td class=\"px-4 py-3 text-sm text-gray-600\">${createdDate}</td>\n      <td class=\"px-4 py-3\">\n        <div class=\"flex space-x-2\">\n          <button\n            class=\"px-3 py-1 bg-blue-100 hover:bg-blue-200 text-blue-700 text-sm rounded transition\"\n            onclick=\"editLink('${escapeHtml(link.slug)}')\"\n          >\n            <i class=\"fas fa-edit mr-1\"></i> Edit\n          </button>\n          <button\n            class=\"px-3 py-1 bg-red-100 hover:bg-red-200 text-red-700 text-sm rounded transition\"\n            onclick=\"deleteLink('${escapeHtml(link.slug)}')\"\n          >\n            <i class=\"fas fa-trash mr-1\"></i> Delete\n          </button>\n        </div>\n      </td>\n    `;\n\n    tbody.appendChild(row);\n  });\n\n  // Always show stats if there are links\n  if (filteredLinks.length > 0) {\n    statsPagination.classList.remove('hidden');\n\n    // Update range info (always visible)\n    const rangeStart = startIdx + 1;\n    const rangeEnd = Math.min(endIdx, filteredLinks.length);\n    document.getElementById('range-start').textContent = rangeStart;\n    document.getElementById('range-end').textContent = rangeEnd;\n    document.getElementById('total-count').textContent = filteredLinks.length;\n\n    // Show pagination controls only when multiple pages\n    if (filteredLinks.length > pageSize) {\n      paginationControls.classList.remove('hidden');\n\n      // Update page info\n      document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;\n\n      // Update button states\n      document.getElementById('prev-page').disabled = currentPage === 1;\n      document.getElementById('next-page').disabled = currentPage === totalPages;\n      document.getElementById('jump-to-page').max = totalPages;\n    } else {\n      paginationControls.classList.add('hidden');\n    }\n  } else {\n    statsPagination.classList.add('hidden');\n  }\n}\n\n// Create link\nasync function handleCreateLink(e) {\n  e.preventDefault();\n\n  const target = document.getElementById('target-url').value;\n  const slug = document.getElementById('custom-slug').value || undefined;\n  const status = parseInt(document.getElementById('status-code').value);\n  const expiresAtInput = document.getElementById('expires-at').value;\n\n  let expiresAt = null;\n  if (expiresAtInput) {\n    expiresAt = Math.floor(new Date(expiresAtInput).getTime() / 1000);\n  }\n\n  try {\n    const response = await apiRequest(`${API_BASE}/links`, {\n      method: 'POST',\n      body: JSON.stringify({ target, slug, status, expiresAt }),\n    });\n\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(data.error || 'Failed to create link');\n    }\n\n    const link = await response.json();\n    const shortUrl = `${window.location.origin}/${link.slug}`;\n\n    showToast(`Link created: ${shortUrl}`, 'success');\n\n    // Reset form\n    e.target.reset();\n\n    // Clear slug check result\n    document.getElementById('slug-check-result').textContent = '';\n    document.getElementById('slug-check-result').className = '';\n\n    // Reload links\n    await loadLinks();\n  } catch (err) {\n    showToast(err.message, 'error');\n  }\n}\n\n// Edit link\nfunction editLink(slug) {\n  const link = currentLinks.find(l => l.slug === slug);\n  if (!link) return;\n\n  document.getElementById('edit-slug').value = link.slug;\n  document.getElementById('edit-target').value = link.target;\n  document.getElementById('edit-status').value = link.status;\n\n  if (link.expiresAt) {\n    const date = new Date(link.expiresAt * 1000);\n    const localDatetime = date.toISOString().slice(0, 16);\n    document.getElementById('edit-expires').value = localDatetime;\n  } else {\n    document.getElementById('edit-expires').value = '';\n  }\n\n  document.getElementById('edit-modal').classList.remove('hidden');\n}\n\nasync function handleEditLink(e) {\n  e.preventDefault();\n\n  const slug = document.getElementById('edit-slug').value;\n  const target = document.getElementById('edit-target').value;\n  const status = parseInt(document.getElementById('edit-status').value);\n  const expiresAtInput = document.getElementById('edit-expires').value;\n\n  let expiresAt = null;\n  if (expiresAtInput) {\n    expiresAt = Math.floor(new Date(expiresAtInput).getTime() / 1000);\n  }\n\n  try {\n    const response = await apiRequest(`${API_BASE}/links/${slug}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ target, status, expiresAt }),\n    });\n\n    if (!response.ok) {\n      const data = await response.json();\n      throw new Error(data.error || 'Failed to update link');\n    }\n\n    closeEditModal();\n    showToast(`Link \"${slug}\" updated successfully!`, 'success');\n\n    // Preserve current search and pagination\n    const tempSearch = searchQuery;\n    await loadLinks();\n    if (tempSearch) {\n      document.getElementById('search-input').value = tempSearch;\n      handleSearch();\n    }\n  } catch (err) {\n    showToast(err.message, 'error');\n  }\n}\n\nfunction closeEditModal() {\n  document.getElementById('edit-modal').classList.add('hidden');\n}\n\n// Delete link\nasync function deleteLink(slug) {\n  if (!confirm(`Are you sure you want to delete the link \"${slug}\"?`)) {\n    return;\n  }\n\n  try {\n    const response = await apiRequest(`${API_BASE}/links/${slug}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete link');\n    }\n\n    showToast(`Link \"${slug}\" deleted successfully!`, 'success');\n\n    // Preserve current search and pagination\n    const tempSearch = searchQuery;\n    await loadLinks();\n    if (tempSearch) {\n      document.getElementById('search-input').value = tempSearch;\n      handleSearch();\n    }\n  } catch (err) {\n    showToast(err.message, 'error');\n  }\n}\n\n// Copy to clipboard\nfunction copyToClipboard(text) {\n  navigator.clipboard.writeText(text).then(\n    () => {\n      showToast('Copied to clipboard!', 'success');\n    },\n    (err) => {\n      showToast('Failed to copy: ' + err, 'error');\n    }\n  );\n}\n\n// Check slug availability\nasync function checkSlugAvailability() {\n  const slug = document.getElementById('custom-slug').value.trim();\n  const resultEl = document.getElementById('slug-check-result');\n\n  if (!slug) {\n    resultEl.textContent = 'Please enter a slug first';\n    resultEl.className = 'text-yellow-600';\n    return;\n  }\n\n  resultEl.textContent = 'Checking...';\n  resultEl.className = 'text-gray-600';\n\n  try {\n    const response = await apiRequest(`${API_BASE}/check-slug/${slug}`);\n\n    if (!response.ok) {\n      throw new Error('Failed to check slug');\n    }\n\n    const data = await response.json();\n\n    if (data.available) {\n      resultEl.textContent = '✓ Available';\n      resultEl.className = 'text-green-600';\n      showToast(`Slug \"${slug}\" is available!`, 'success');\n    } else {\n      resultEl.textContent = `✗ ${data.reason || 'Not available'}`;\n      resultEl.className = 'text-red-600';\n      showToast(data.reason || 'Slug not available', 'error');\n    }\n  } catch (err) {\n    resultEl.textContent = `Error: ${err.message}`;\n    resultEl.className = 'text-red-600';\n    showToast(err.message, 'error');\n  }\n}\n\n// Search functionality\nfunction handleSearch() {\n  searchQuery = document.getElementById('search-input').value.trim().toLowerCase();\n  currentPage = 1;\n\n  if (!searchQuery) {\n    filteredLinks = currentLinks;\n  } else {\n    filteredLinks = currentLinks.filter(link =>\n      link.slug.toLowerCase().includes(searchQuery) ||\n      link.target.toLowerCase().includes(searchQuery)\n    );\n  }\n\n  const table = document.getElementById('links-table');\n  const noLinks = document.getElementById('no-links');\n\n  if (filteredLinks.length === 0) {\n    table.classList.add('hidden');\n    noLinks.classList.remove('hidden');\n    noLinks.querySelector('p').textContent = searchQuery\n      ? 'No links match your search'\n      : 'No links found';\n  } else {\n    noLinks.classList.add('hidden');\n    table.classList.remove('hidden');\n    renderLinksWithPagination();\n  }\n}\n\n// Pagination controls\nfunction changePage(delta) {\n  const totalPages = Math.ceil(filteredLinks.length / pageSize);\n  const newPage = currentPage + delta;\n\n  if (newPage >= 1 && newPage <= totalPages) {\n    currentPage = newPage;\n    renderLinksWithPagination();\n  }\n}\n\nfunction jumpToPage() {\n  const input = document.getElementById('jump-to-page');\n  const pageNum = parseInt(input.value);\n  const totalPages = Math.ceil(filteredLinks.length / pageSize);\n\n  if (pageNum >= 1 && pageNum <= totalPages) {\n    currentPage = pageNum;\n    renderLinksWithPagination();\n  } else {\n    alert(`Please enter a page number between 1 and ${totalPages}`);\n  }\n}\n\n// Utility functions\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\nfunction showError(elementId, message) {\n  const el = document.getElementById(elementId);\n  el.textContent = message;\n  el.classList.add('show');\n}\n",
};
